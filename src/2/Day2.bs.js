// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Utils = require("../Utils.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

var input = Belt_List.keepMap(Utils.getLines(/* "," */44, "./input.txt"), (function (x) {
        try {
          return Caml_format.caml_int_of_string(x);
        }
        catch (exn){
          return ;
        }
      }));

var intCodes = Belt_List.toArray(input);

function op(operation, nextCodeIdx, intCodes) {
  return Caml_array.caml_array_set(intCodes, Caml_array.caml_array_get(intCodes, nextCodeIdx + 3 | 0), Curry._2(operation, Caml_array.caml_array_get(intCodes, Caml_array.caml_array_get(intCodes, nextCodeIdx + 1 | 0)), Caml_array.caml_array_get(intCodes, Caml_array.caml_array_get(intCodes, nextCodeIdx + 2 | 0))));
}

function $$process(_nextCodeIdx, intCodes) {
  while(true) {
    var nextCodeIdx = _nextCodeIdx;
    var match = Caml_array.caml_array_get(intCodes, nextCodeIdx);
    if (match !== 1) {
      if (match !== 2) {
        return intCodes;
      } else {
        op(Caml_int32.imul, nextCodeIdx, intCodes);
        _nextCodeIdx = nextCodeIdx + 4 | 0;
        continue ;
      }
    } else {
      op((function (prim, prim$1) {
              return prim + prim$1 | 0;
            }), nextCodeIdx, intCodes);
      _nextCodeIdx = nextCodeIdx + 4 | 0;
      continue ;
    }
  };
}

Caml_array.caml_array_set(intCodes, 1, 12);

Caml_array.caml_array_set(intCodes, 2, 2);

var part1 = Caml_array.caml_array_get($$process(0, intCodes), 0);

console.log(part1);

var values = Belt_List.makeBy(100, (function (i) {
        return i + 1 | 0;
      }));

var pairs = Belt_List.flatten(Belt_List.map(values, (function (x) {
            return Belt_List.map(values, (function (y) {
                          return /* tuple */[
                                  x,
                                  y
                                ];
                        }));
          })));

var match = Belt_List.getExn(Belt_List.keepMap(pairs, (function (inputs) {
            var intCodes = Belt_List.toArray(input);
            Caml_array.caml_array_set(intCodes, 1, inputs[0]);
            Caml_array.caml_array_set(intCodes, 2, inputs[1]);
            var match = Caml_array.caml_array_get($$process(0, intCodes), 0) === 19690720;
            if (match) {
              return inputs;
            }
            
          })), 0);

var part2 = Caml_int32.imul(100, match[0]) + match[1] | 0;

console.log(part2);

exports.input = input;
exports.intCodes = intCodes;
exports.op = op;
exports.$$process = $$process;
exports.part1 = part1;
exports.part2 = part2;
/* input Not a pure module */
